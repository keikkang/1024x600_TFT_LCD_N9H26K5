<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\VPOST_Data\DebugRel\VPOST.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\VPOST_Data\DebugRel\VPOST.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Tue May 16 10:29:08 2023
<BR><P>
<H3>Maximum Stack Usage =        324 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; sysSetSystemClock &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[19]">Vector_Table</a>
 <LI><a href="#[18]">Reset_Go</a>
 <LI><a href="#[b]">Undefined_Handler</a>
 <LI><a href="#[c]">SWI_Handler1</a>
 <LI><a href="#[d]">Prefetch_Handler</a>
 <LI><a href="#[e]">Abort_Handler</a>
 <LI><a href="#[f]">IRQ_Handler</a>
 <LI><a href="#[10]">FIQ_Handler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[29]">sys_flush_and_clean_dcache</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[29]">sys_flush_and_clean_dcache</a><BR>
 <LI><a href="#[b]">Undefined_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">Undefined_Handler</a><BR>
 <LI><a href="#[c]">SWI_Handler1</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">SWI_Handler1</a><BR>
 <LI><a href="#[d]">Prefetch_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">Prefetch_Handler</a><BR>
 <LI><a href="#[e]">Abort_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e]">Abort_Handler</a><BR>
 <LI><a href="#[f]">IRQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f]">IRQ_Handler</a><BR>
 <LI><a href="#[10]">FIQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10]">FIQ_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[e]">Abort_Handler</a> from wb_init.o(WB_INIT) referenced from wb_init.o(WB_INIT)
 <LI><a href="#[10]">FIQ_Handler</a> from wb_init.o(WB_INIT) referenced from wb_init.o(WB_INIT)
 <LI><a href="#[f]">IRQ_Handler</a> from wb_init.o(WB_INIT) referenced from wb_init.o(WB_INIT)
 <LI><a href="#[d]">Prefetch_Handler</a> from wb_init.o(WB_INIT) referenced from wb_init.o(WB_INIT)
 <LI><a href="#[18]">Reset_Go</a> from wb_init.o(WB_INIT) referenced from wb_init.o(WB_INIT)
 <LI><a href="#[c]">SWI_Handler1</a> from wb_init.o(WB_INIT) referenced from wb_init.o(WB_INIT)
 <LI><a href="#[b]">Undefined_Handler</a> from wb_init.o(WB_INIT) referenced from wb_init.o(WB_INIT)
 <LI><a href="#[9]">WB_Interrupt_Shell</a> from wb_aic.o(.text) referenced 188 times from wb_aic.o(.data)
 <LI><a href="#[12]">_dramClockSwitch</a> from wb_config.o(.text) referenced from wb_config.o(.text)
 <LI><a href="#[43]">_sysClockSwitch</a> from wb_config.o(.text) referenced from wb_config.o(.text)
 <LI><a href="#[11]">main</a> from main.o(.text) referenced from __rtentry2.o(.ARM.Collect$$rtentry$$0000000D)
 <LI><a href="#[3a]">sysFiqHandler</a> from wb_aic.o(.text) referenced from wb_aic.o(.text)
 <LI><a href="#[39]">sysIrqHandler</a> from wb_aic.o(.text) referenced from wb_aic.o(.text)
 <LI><a href="#[13]">sysTimerISR</a> from wb_timer.o(.text) referenced from wb_timer.o(.text)
 <LI><a href="#[14]">sysUartISR</a> from wb_uart.o(.text) referenced from wb_uart.o(.text)
 <LI><a href="#[15]">vpostSetDataBusPin</a> from n9h26_vpost_driver.o(i.vpostSetDataBusPin) referenced from n9h26_vpost_sync_lcm.o(i.vpostSyncLCMInit)
 <LI><a href="#[16]">vpostSetDataBusPin_noDE</a> from n9h26_vpost_driver.o(i.vpostSetDataBusPin_noDE) referenced from n9h26_vpost_sync_lcm.o(i.vpostSyncLCMInit)
 <LI><a href="#[17]">vpostSetDataBusPin_onlyDE</a> from n9h26_vpost_driver.o(i.vpostSetDataBusPin_onlyDE) referenced from n9h26_vpost_sync_lcm.o(i.vpostSyncLCMInit)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[19]"></a>Vector_Table</STRONG> (ARM, 0 bytes, Stack size unknown bytes, wb_init.o(WB_INIT))
<BR><BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Go
</UL>

<P><STRONG><a name="[18]"></a>Reset_Go</STRONG> (ARM, 0 bytes, Stack size unknown bytes, wb_init.o(WB_INIT))
<BR><BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector_Table
</UL>

<P><STRONG><a name="[1a]"></a>__main</STRONG> (ARM, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Go
</UL>

<P><STRONG><a name="[1b]"></a>__scatterload</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[1d]"></a>__scatterload_rt2</STRONG> (ARM, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[84]"></a>__scatterload_null</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[85]"></a>__decompress</STRONG> (ARM, 96 bytes, Stack size unknown bytes, __dclz77c.o(!!dclz77c), UNUSED)

<P><STRONG><a name="[86]"></a>__decompress2</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __dclz77c.o(!!dclz77c), UNUSED)

<P><STRONG><a name="[1e]"></a>__scatterload_copy</STRONG> (ARM, 40 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[87]"></a>__scatterload_zeroinit</STRONG> (ARM, 44 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[22]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li (via BLX)
</UL>

<P><STRONG><a name="[88]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[89]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[8a]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[8b]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[8c]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[8d]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[8e]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[8f]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[90]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[91]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[92]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[93]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[94]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[95]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[96]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[97]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[98]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[99]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[9a]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[9b]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[9c]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[26]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls (via BLX)
</UL>

<P><STRONG><a name="[9d]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[9e]"></a>__rt_lib_shutdown_fini_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[9f]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[a0]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000011))

<P><STRONG><a name="[a1]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000012))

<P><STRONG><a name="[a2]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[a3]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[a4]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[1c]"></a>__rt_entry</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[a5]"></a>__rt_entry_presh_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[1f]"></a>__rt_entry_sh</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap &rArr; __user_initial_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[21]"></a>__rt_entry_li</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (via BLX)
</UL>

<P><STRONG><a name="[a6]"></a>__rt_entry_postsh_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[23]"></a>__rt_entry_main</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; exit
</UL>
<BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit (via BX)
</UL>

<P><STRONG><a name="[a7]"></a>__rt_entry_postli_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[6b]"></a>__rt_exit</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit (via BLX)
</UL>

<P><STRONG><a name="[25]"></a>__rt_exit_ls</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown (via BLX)
</UL>

<P><STRONG><a name="[a8]"></a>__rt_exit_prels_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[27]"></a>__rt_exit_exit</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[29]"></a>sys_flush_and_clean_dcache</STRONG> (ARM, 12 bytes, Stack size 0 bytes, wb_cache.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_flush_and_clean_dcache
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDisableCache
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_flush_and_clean_dcache
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysFlushCache
</UL>

<P><STRONG><a name="[65]"></a>sysSetupCP15</STRONG> (ARM, 36 bytes, Stack size 0 bytes, wb_mmu.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInitMMUTable
</UL>

<P><STRONG><a name="[28]"></a>_sys_exit</STRONG> (ARM, 8 bytes, Stack size 0 bytes, standalone.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[a9]"></a>_ttywrch</STRONG> (ARM, 8 bytes, Stack size 0 bytes, standalone.o(.text), UNUSED)

<P><STRONG><a name="[69]"></a>__user_initial_stackheap</STRONG> (ARM, 44 bytes, Stack size 32 bytes, standalone.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __user_initial_stackheap
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[2a]"></a>initUART</STRONG> (ARM, 96 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = initUART &rArr; sysInitializeUART &rArr; sysInstallISR &rArr; sysInitializeAIC &rArr; sysFlushCache
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysUartPort
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInvalidCache
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInitializeUART
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetExternalClock
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysFlushCache
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysEnableCache
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[31]"></a>initTimer</STRONG> (ARM, 60 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 212 + Unknown Stack Size
<LI>Call Chain = initTimer &rArr; sysStartTimer &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysStartTimer
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetTimerReferenceClock
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetLocalInterrupt
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetExternalClock
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11]"></a>main</STRONG> (ARM, 248 bytes, Stack size 80 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = main &rArr; sysSetSystemClock &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostSyncLCMInit
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetSystemClock
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetDramClock
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTimer
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initUART
</UL>
<BR>[Address Reference Count : 1]<UL><LI> __rtentry2.o(.ARM.Collect$$rtentry$$0000000D)
</UL>
<P><STRONG><a name="[39]"></a>sysIrqHandler</STRONG> (ARM, 204 bytes, Stack size 32 bytes, wb_aic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sysIrqHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wb_aic.o(.text)
</UL>
<P><STRONG><a name="[3a]"></a>sysFiqHandler</STRONG> (ARM, 204 bytes, Stack size 32 bytes, wb_aic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sysFiqHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wb_aic.o(.text)
</UL>
<P><STRONG><a name="[9]"></a>WB_Interrupt_Shell</STRONG> (ARM, 4 bytes, Stack size 0 bytes, wb_aic.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> wb_aic.o(.data)
</UL>
<P><STRONG><a name="[3b]"></a>sysInitializeAIC</STRONG> (ARM, 60 bytes, Stack size 8 bytes, wb_aic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sysInitializeAIC &rArr; sysFlushCache
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetCacheState
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysFlushCache
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInstallISR
</UL>

<P><STRONG><a name="[54]"></a>sysDisableInterrupt</STRONG> (ARM, 84 bytes, Stack size 0 bytes, wb_aic.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysStopTimer
</UL>

<P><STRONG><a name="[51]"></a>sysEnableInterrupt</STRONG> (ARM, 84 bytes, Stack size 0 bytes, wb_aic.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInstallWatchDogTimerISR
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysStartTimer
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInitializeUART
</UL>

<P><STRONG><a name="[aa]"></a>sysInstallExceptionHandler</STRONG> (ARM, 136 bytes, Stack size 0 bytes, wb_aic.o(.text), UNUSED)

<P><STRONG><a name="[ab]"></a>sysInstallFiqHandler</STRONG> (ARM, 20 bytes, Stack size 0 bytes, wb_aic.o(.text), UNUSED)

<P><STRONG><a name="[ac]"></a>sysInstallIrqHandler</STRONG> (ARM, 20 bytes, Stack size 0 bytes, wb_aic.o(.text), UNUSED)

<P><STRONG><a name="[3d]"></a>sysInstallISR</STRONG> (ARM, 328 bytes, Stack size 24 bytes, wb_aic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = sysInstallISR &rArr; sysInitializeAIC &rArr; sysFlushCache
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInitializeAIC
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInstallWatchDogTimerISR
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysStopTimer
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysStartTimer
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInitializeUART
</UL>

<P><STRONG><a name="[ad]"></a>sysSetGlobalInterrupt</STRONG> (ARM, 100 bytes, Stack size 0 bytes, wb_aic.o(.text), UNUSED)

<P><STRONG><a name="[ae]"></a>sysSetInterruptPriorityLevel</STRONG> (ARM, 196 bytes, Stack size 16 bytes, wb_aic.o(.text), UNUSED)

<P><STRONG><a name="[52]"></a>sysSetInterruptType</STRONG> (ARM, 152 bytes, Stack size 12 bytes, wb_aic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = sysSetInterruptType
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysStartTimer
</UL>

<P><STRONG><a name="[34]"></a>sysSetLocalInterrupt</STRONG> (ARM, 140 bytes, Stack size 0 bytes, wb_aic.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInstallWatchDogTimerISR
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysStartTimer
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTimer
</UL>

<P><STRONG><a name="[af]"></a>sysSetAIC2SWMode</STRONG> (ARM, 16 bytes, Stack size 0 bytes, wb_aic.o(.text), UNUSED)

<P><STRONG><a name="[b0]"></a>sysGetInterruptEnableStatus</STRONG> (ARM, 12 bytes, Stack size 0 bytes, wb_aic.o(.text), UNUSED)

<P><STRONG><a name="[b1]"></a>sysGetInterruptHighEnableStatus</STRONG> (ARM, 12 bytes, Stack size 0 bytes, wb_aic.o(.text), UNUSED)

<P><STRONG><a name="[b2]"></a>sysGetIBitState</STRONG> (ARM, 28 bytes, Stack size 0 bytes, wb_aic.o(.text), UNUSED)

<P><STRONG><a name="[b3]"></a>sysGetSdramSizebyMB</STRONG> (ARM, 284 bytes, Stack size 0 bytes, wb_cache.o(.text), UNUSED)

<P><STRONG><a name="[2f]"></a>sysEnableCache</STRONG> (ARM, 44 bytes, Stack size 8 bytes, wb_cache.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sysEnableCache &rArr; sysInitMMUTable
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInitMMUTable
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dramClockSwitchStart
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sysClockSwitchStart
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initUART
</UL>

<P><STRONG><a name="[3f]"></a>sysDisableCache</STRONG> (ARM, 92 bytes, Stack size 8 bytes, wb_cache.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sysDisableCache
</UL>
<BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_flush_and_clean_dcache
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dramClockSwitchStart
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sysClockSwitchStart
</UL>

<P><STRONG><a name="[30]"></a>sysFlushCache</STRONG> (ARM, 112 bytes, Stack size 16 bytes, wb_cache.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sysFlushCache
</UL>
<BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_flush_and_clean_dcache
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dramClockSwitchStart
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sysClockSwitchStart
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInitializeAIC
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initUART
</UL>

<P><STRONG><a name="[2e]"></a>sysInvalidCache</STRONG> (ARM, 12 bytes, Stack size 0 bytes, wb_cache.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initUART
</UL>

<P><STRONG><a name="[3c]"></a>sysGetCacheState</STRONG> (ARM, 12 bytes, Stack size 0 bytes, wb_cache.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dramClockSwitchStart
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sysClockSwitchStart
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInitializeAIC
</UL>

<P><STRONG><a name="[46]"></a>sysGetCacheMode</STRONG> (ARM, 12 bytes, Stack size 0 bytes, wb_cache.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dramClockSwitchStart
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sysClockSwitchStart
</UL>

<P><STRONG><a name="[b4]"></a>_sysLockCode</STRONG> (ARM, 132 bytes, Stack size 12 bytes, wb_cache.o(.text), UNUSED)

<P><STRONG><a name="[b5]"></a>_sysUnLockCode</STRONG> (ARM, 20 bytes, Stack size 0 bytes, wb_cache.o(.text), UNUSED)

<P><STRONG><a name="[40]"></a>sysGetPLLOutputHz</STRONG> (ARM, 164 bytes, Stack size 56 bytes, wb_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = sysGetPLLOutputHz
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetPllClock
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetSystemClock
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetDramClock
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostSyncLCMInit
</UL>

<P><STRONG><a name="[b6]"></a>sysCheckPllConstraint</STRONG> (ARM, 12 bytes, Stack size 0 bytes, wb_config.o(.text), UNUSED)

<P><STRONG><a name="[42]"></a>_sysGetPLLControlRegister</STRONG> (ARM, 292 bytes, Stack size 56 bytes, wb_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _sysGetPLLControlRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetPllClock
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetSystemClock
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetDramClock
</UL>

<P><STRONG><a name="[b7]"></a>sysSetPLLControlRegister</STRONG> (ARM, 40 bytes, Stack size 0 bytes, wb_config.o(.text), UNUSED)

<P><STRONG><a name="[43]"></a>_sysClockSwitch</STRONG> (ARM, 344 bytes, Stack size 24 bytes, wb_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _sysClockSwitch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wb_config.o(.text)
</UL>
<P><STRONG><a name="[44]"></a>_sysClockSwitchStart</STRONG> (ARM, 180 bytes, Stack size 56 bytes, wb_config.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetCacheMode
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDisableCache
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetCacheState
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysFlushCache
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysEnableCache
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[2b]"></a>sysGetExternalClock</STRONG> (ARM, 24 bytes, Stack size 0 bytes, wb_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPrintf
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetPllClock
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetSystemClock
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetDramClock
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostSyncLCMInit
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetSystemClock
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetDramClock
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTimer
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initUART
</UL>

<P><STRONG><a name="[47]"></a>sysGetDramClock</STRONG> (ARM, 88 bytes, Stack size 8 bytes, wb_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = sysGetDramClock &rArr; sysGetPLLOutputHz
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetPLLOutputHz
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetExternalClock
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetSystemClock
</UL>

<P><STRONG><a name="[48]"></a>sysGetSystemClock</STRONG> (ARM, 200 bytes, Stack size 32 bytes, wb_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = sysGetSystemClock &rArr; sysGetPLLOutputHz
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetPLLOutputHz
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetExternalClock
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetCPUClock
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetCPUClock
</UL>

<P><STRONG><a name="[49]"></a>sysGetCPUClock</STRONG> (ARM, 48 bytes, Stack size 16 bytes, wb_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = sysGetCPUClock &rArr; sysGetSystemClock &rArr; sysGetPLLOutputHz
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetSystemClock
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetHCLK1Clock
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetSystemClock
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetDramClock
</UL>

<P><STRONG><a name="[36]"></a>sysSetSystemClock</STRONG> (ARM, 1236 bytes, Stack size 72 bytes, wb_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 244 + Unknown Stack Size
<LI>Call Chain = sysSetSystemClock &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetCPUClock
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetDramClock
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sysGetPLLControlRegister
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetExternalClock
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4a]"></a>sysSetCPUClock</STRONG> (ARM, 144 bytes, Stack size 24 bytes, wb_config.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetSystemClock
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[4b]"></a>sysGetHCLK1Clock</STRONG> (ARM, 48 bytes, Stack size 16 bytes, wb_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = sysGetHCLK1Clock &rArr; sysGetCPUClock &rArr; sysGetSystemClock &rArr; sysGetPLLOutputHz
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetCPUClock
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetAPBClock
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetHCLK234Clock
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetAPBClock
</UL>

<P><STRONG><a name="[4c]"></a>sysSetAPBClock</STRONG> (ARM, 168 bytes, Stack size 16 bytes, wb_config.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetHCLK1Clock
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[4d]"></a>sysGetHCLK234Clock</STRONG> (ARM, 44 bytes, Stack size 16 bytes, wb_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = sysGetHCLK234Clock &rArr; sysGetHCLK1Clock &rArr; sysGetCPUClock &rArr; sysGetSystemClock &rArr; sysGetPLLOutputHz
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetHCLK1Clock
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetDramClock
</UL>

<P><STRONG><a name="[4e]"></a>sysGetAPBClock</STRONG> (ARM, 44 bytes, Stack size 16 bytes, wb_config.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetHCLK1Clock
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[4f]"></a>sysSetPllClock</STRONG> (ARM, 400 bytes, Stack size 32 bytes, wb_config.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sysGetPLLControlRegister
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetPLLOutputHz
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetExternalClock
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[12]"></a>_dramClockSwitch</STRONG> (ARM, 2920 bytes, Stack size 44 bytes, wb_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = _dramClockSwitch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wb_config.o(.text)
</UL>
<P><STRONG><a name="[50]"></a>_dramClockSwitchStart</STRONG> (ARM, 196 bytes, Stack size 56 bytes, wb_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _dramClockSwitchStart &rArr; sysFlushCache
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetCacheMode
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDisableCache
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetCacheState
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysFlushCache
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysEnableCache
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetDramClock
</UL>

<P><STRONG><a name="[35]"></a>sysSetDramClock</STRONG> (ARM, 408 bytes, Stack size 48 bytes, wb_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220 + Unknown Stack Size
<LI>Call Chain = sysSetDramClock &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dramClockSwitchStart
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetHCLK234Clock
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetCPUClock
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sysGetPLLControlRegister
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysUartPort
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInitializeUART
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetExternalClock
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13]"></a>sysTimerISR</STRONG> (ARM, 856 bytes, Stack size 8 bytes, wb_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sysTimerISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wb_timer.o(.text)
</UL>
<P><STRONG><a name="[5b]"></a>sysGetTicks</STRONG> (ARM, 124 bytes, Stack size 0 bytes, wb_timer.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelay
</UL>

<P><STRONG><a name="[b8]"></a>sysResetTicks</STRONG> (ARM, 140 bytes, Stack size 0 bytes, wb_timer.o(.text), UNUSED)

<P><STRONG><a name="[b9]"></a>sysUpdateTickCount</STRONG> (ARM, 124 bytes, Stack size 0 bytes, wb_timer.o(.text), UNUSED)

<P><STRONG><a name="[32]"></a>sysSetTimerReferenceClock</STRONG> (ARM, 124 bytes, Stack size 0 bytes, wb_timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTimer
</UL>

<P><STRONG><a name="[33]"></a>sysStartTimer</STRONG> (ARM, 1040 bytes, Stack size 24 bytes, wb_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196 + Unknown Stack Size
<LI>Call Chain = sysStartTimer &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetInterruptType
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInstallISR
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysEnableInterrupt
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetLocalInterrupt
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelay
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTimer
</UL>

<P><STRONG><a name="[53]"></a>sysStopTimer</STRONG> (ARM, 700 bytes, Stack size 8 bytes, wb_timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInstallISR
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDisableInterrupt
</UL>

<P><STRONG><a name="[ba]"></a>sysClearWatchDogTimerCount</STRONG> (ARM, 24 bytes, Stack size 0 bytes, wb_timer.o(.text), UNUSED)

<P><STRONG><a name="[bb]"></a>sysClearWatchDogTimerInterruptStatus</STRONG> (ARM, 24 bytes, Stack size 0 bytes, wb_timer.o(.text), UNUSED)

<P><STRONG><a name="[bc]"></a>sysDisableWatchDogTimer</STRONG> (ARM, 24 bytes, Stack size 0 bytes, wb_timer.o(.text), UNUSED)

<P><STRONG><a name="[bd]"></a>sysDisableWatchDogTimerReset</STRONG> (ARM, 24 bytes, Stack size 0 bytes, wb_timer.o(.text), UNUSED)

<P><STRONG><a name="[be]"></a>sysEnableWatchDogTimer</STRONG> (ARM, 24 bytes, Stack size 0 bytes, wb_timer.o(.text), UNUSED)

<P><STRONG><a name="[bf]"></a>sysEnableWatchDogTimerReset</STRONG> (ARM, 24 bytes, Stack size 0 bytes, wb_timer.o(.text), UNUSED)

<P><STRONG><a name="[55]"></a>sysInstallWatchDogTimerISR</STRONG> (ARM, 72 bytes, Stack size 24 bytes, wb_timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInstallISR
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysEnableInterrupt
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetLocalInterrupt
</UL>

<P><STRONG><a name="[c0]"></a>sysSetWatchDogTimerInterval</STRONG> (ARM, 40 bytes, Stack size 0 bytes, wb_timer.o(.text), UNUSED)

<P><STRONG><a name="[c1]"></a>sysSetTimerEvent</STRONG> (ARM, 680 bytes, Stack size 12 bytes, wb_timer.o(.text), UNUSED)

<P><STRONG><a name="[c2]"></a>sysClearTimerEvent</STRONG> (ARM, 340 bytes, Stack size 0 bytes, wb_timer.o(.text), UNUSED)

<P><STRONG><a name="[58]"></a>sysDOS_Time_To_UTC</STRONG> (ARM, 300 bytes, Stack size 16 bytes, wb_timer.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetLocalTime
</UL>

<P><STRONG><a name="[56]"></a>sysUTC_To_DOS_Time</STRONG> (ARM, 320 bytes, Stack size 24 bytes, wb_timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetCurrentTime
</UL>

<P><STRONG><a name="[57]"></a>sysSetLocalTime</STRONG> (ARM, 64 bytes, Stack size 28 bytes, wb_timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDOS_Time_To_UTC
</UL>

<P><STRONG><a name="[59]"></a>sysGetCurrentTime</STRONG> (ARM, 68 bytes, Stack size 16 bytes, wb_timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysUTC_To_DOS_Time
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[5a]"></a>sysDelay</STRONG> (ARM, 92 bytes, Stack size 16 bytes, wb_timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetTicks
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysStartTimer
</UL>

<P><STRONG><a name="[2c]"></a>sysUartPort</STRONG> (ARM, 160 bytes, Stack size 0 bytes, wb_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPrintf
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetDramClock
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInitializeUART
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initUART
</UL>

<P><STRONG><a name="[c3]"></a>sysUartInstallcallback</STRONG> (ARM, 76 bytes, Stack size 0 bytes, wb_uart.o(.text), UNUSED)

<P><STRONG><a name="[14]"></a>sysUartISR</STRONG> (ARM, 676 bytes, Stack size 24 bytes, wb_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sysUartISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wb_uart.o(.text)
</UL>
<P><STRONG><a name="[c4]"></a>sysUartEnableInt</STRONG> (ARM, 148 bytes, Stack size 0 bytes, wb_uart.o(.text), UNUSED)

<P><STRONG><a name="[2d]"></a>sysInitializeUART</STRONG> (ARM, 528 bytes, Stack size 16 bytes, wb_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = sysInitializeUART &rArr; sysInstallISR &rArr; sysInitializeAIC &rArr; sysFlushCache
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetBaudRate
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInstallISR
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysEnableInterrupt
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysUartPort
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPrintf
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetDramClock
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initUART
</UL>

<P><STRONG><a name="[5e]"></a>_PutChar_f</STRONG> (ARM, 440 bytes, Stack size 0 bytes, wb_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPrintf
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPutString
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatItem
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPutStringReverse
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPutRepChar
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>

<P><STRONG><a name="[5d]"></a>sysPutString</STRONG> (ARM, 40 bytes, Stack size 8 bytes, wb_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sysPutString
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PutChar_f
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatItem
</UL>

<P><STRONG><a name="[64]"></a>sysPrintf</STRONG> (ARM, 204 bytes, Stack size 40 bytes, wb_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PutChar_f
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatItem
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysUartPort
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInitializeUART
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetExternalClock
</UL>

<P><STRONG><a name="[37]"></a>sysprintf</STRONG> (ARM, 284 bytes, Stack size 40 bytes, wb_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 172 + Unknown Stack Size
<LI>Call Chain = sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PutChar_f
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatItem
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysUartPort
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInitializeUART
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetExternalClock
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostLcmConfigure
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetAPBClock
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysStartTimer
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetSystemClock
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetDramClock
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c5]"></a>sysGetChar</STRONG> (ARM, 52 bytes, Stack size 0 bytes, wb_uart.o(.text), UNUSED)

<P><STRONG><a name="[c6]"></a>sysPutChar</STRONG> (ARM, 48 bytes, Stack size 0 bytes, wb_uart.o(.text), UNUSED)

<P><STRONG><a name="[c7]"></a>sysUartTransfer</STRONG> (ARM, 68 bytes, Stack size 0 bytes, wb_uart.o(.text), UNUSED)

<P><STRONG><a name="[c8]"></a>sysSetMMUMappingMethod</STRONG> (ARM, 8 bytes, Stack size 0 bytes, wb_mmu.o(.text), UNUSED)

<P><STRONG><a name="[3e]"></a>sysInitMMUTable</STRONG> (ARM, 164 bytes, Stack size 8 bytes, wb_mmu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sysInitMMUTable
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetupCP15
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysEnableCache
</UL>

<P><STRONG><a name="[63]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatItem (via BLX)
</UL>

<P><STRONG><a name="[45]"></a>__aeabi_memcpy</STRONG> (ARM, 0 bytes, Stack size 0 bytes, rt_memcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dramClockSwitchStart
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sysClockSwitchStart
</UL>

<P><STRONG><a name="[66]"></a>__rt_memcpy</STRONG> (ARM, 212 bytes, Stack size 0 bytes, rt_memcpy.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[c9]"></a>_memcpy_lastbytes</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memcpy.o(.text), UNUSED)

<P><STRONG><a name="[ca]"></a>__aeabi_idiv</STRONG> (ARM, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[cb]"></a>__aeabi_idivmod</STRONG> (ARM, 380 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[67]"></a>__aeabi_memcpy4</STRONG> (ARM, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[cc]"></a>__aeabi_memcpy8</STRONG> (ARM, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[cd]"></a>__rt_memcpy_w</STRONG> (ARM, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[ce]"></a>_memcpy_lastbytes_aligned</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[cf]"></a>__user_libspace</STRONG> (ARM, 12 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[68]"></a>__user_perproc_libspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[d0]"></a>__user_perthread_libspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[20]"></a>__user_setup_stackheap</STRONG> (ARM, 96 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __user_setup_stackheap &rArr; __user_initial_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[24]"></a>exit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit (via BLX)
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[d1]"></a>__aeabi_uidiv</STRONG> (ARM, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text_udiv), UNUSED)

<P><STRONG><a name="[41]"></a>__aeabi_uidivmod</STRONG> (ARM, 36 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text_udiv))
<BR><BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div_large
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div2
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div5
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div8
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPutNumber
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetBaudRate
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetCurrentTime
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysUTC_To_DOS_Time
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetPllClock
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetAPBClock
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetHCLK234Clock
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetAPBClock
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetCPUClock
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetCPUClock
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetSystemClock
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetDramClock
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sysGetPLLControlRegister
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetPLLOutputHz
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostSyncLCMInit
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysStartTimer
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetSystemClock
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetDramClock
</UL>

<P><STRONG><a name="[77]"></a>SetSyncLcmDataBus</STRONG> (ARM, 24 bytes, Stack size 16 bytes, n9h26_vpost_sync_lcm.o(i.SetSyncLcmDataBus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SetSyncLcmDataBus
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostSyncLCMInit
</UL>

<P><STRONG><a name="[73]"></a>vpostLcmConfigure</STRONG> (ARM, 372 bytes, Stack size 16 bytes, n9h26_vpost_sync_lcm.o(i.vpostLcmConfigure))
<BR><BR>[Stack]<UL><LI>Max Depth = 188 + Unknown Stack Size
<LI>Call Chain = vpostLcmConfigure &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiWrRegInit
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiWrReg
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiDelay
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostSyncLCMInit
</UL>

<P><STRONG><a name="[15]"></a>vpostSetDataBusPin</STRONG> (ARM, 484 bytes, Stack size 0 bytes, n9h26_vpost_driver.o(i.vpostSetDataBusPin))
<BR>[Address Reference Count : 1]<UL><LI> n9h26_vpost_sync_lcm.o(i.vpostSyncLCMInit)
</UL>
<P><STRONG><a name="[16]"></a>vpostSetDataBusPin_noDE</STRONG> (ARM, 424 bytes, Stack size 0 bytes, n9h26_vpost_driver.o(i.vpostSetDataBusPin_noDE))
<BR>[Address Reference Count : 1]<UL><LI> n9h26_vpost_sync_lcm.o(i.vpostSyncLCMInit)
</UL>
<P><STRONG><a name="[17]"></a>vpostSetDataBusPin_onlyDE</STRONG> (ARM, 424 bytes, Stack size 0 bytes, n9h26_vpost_driver.o(i.vpostSetDataBusPin_onlyDE))
<BR>[Address Reference Count : 1]<UL><LI> n9h26_vpost_sync_lcm.o(i.vpostSyncLCMInit)
</UL>
<P><STRONG><a name="[76]"></a>vpostSetFrameBuffer_DataType</STRONG> (ARM, 32 bytes, Stack size 0 bytes, n9h26_vpost_driver.o(i.vpostSetFrameBuffer_DataType))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostSyncLCMInit
</UL>

<P><STRONG><a name="[7f]"></a>vpostSetFrameBuffer_Size</STRONG> (ARM, 56 bytes, Stack size 0 bytes, n9h26_vpost_driver.o(i.vpostSetFrameBuffer_Size))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostSyncLCMInit
</UL>

<P><STRONG><a name="[81]"></a>vpostSetLCM_ImageSource</STRONG> (ARM, 28 bytes, Stack size 0 bytes, n9h26_vpost_driver.o(i.vpostSetLCM_ImageSource))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostSyncLCMInit
</UL>

<P><STRONG><a name="[78]"></a>vpostSetLCM_TypeSelect</STRONG> (ARM, 32 bytes, Stack size 0 bytes, n9h26_vpost_driver.o(i.vpostSetLCM_TypeSelect))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostSyncLCMInit
</UL>

<P><STRONG><a name="[79]"></a>vpostSetParalelSyncLCM_Interface</STRONG> (ARM, 32 bytes, Stack size 0 bytes, n9h26_vpost_driver.o(i.vpostSetParalelSyncLCM_Interface))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostSyncLCMInit
</UL>

<P><STRONG><a name="[7a]"></a>vpostSetSerialSyncLCM_Interface</STRONG> (ARM, 32 bytes, Stack size 0 bytes, n9h26_vpost_driver.o(i.vpostSetSerialSyncLCM_Interface))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostSyncLCMInit
</UL>

<P><STRONG><a name="[7c]"></a>vpostSetSyncLCM_HTiming</STRONG> (ARM, 56 bytes, Stack size 0 bytes, n9h26_vpost_driver.o(i.vpostSetSyncLCM_HTiming))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostSyncLCMInit
</UL>

<P><STRONG><a name="[7e]"></a>vpostSetSyncLCM_ImageWindow</STRONG> (ARM, 88 bytes, Stack size 0 bytes, n9h26_vpost_driver.o(i.vpostSetSyncLCM_ImageWindow))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostSyncLCMInit
</UL>

<P><STRONG><a name="[7d]"></a>vpostSetSyncLCM_VTiming</STRONG> (ARM, 48 bytes, Stack size 0 bytes, n9h26_vpost_driver.o(i.vpostSetSyncLCM_VTiming))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostSyncLCMInit
</UL>

<P><STRONG><a name="[80]"></a>vpostSetYUVEndianSelect</STRONG> (ARM, 32 bytes, Stack size 0 bytes, n9h26_vpost_driver.o(i.vpostSetYUVEndianSelect))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostSyncLCMInit
</UL>

<P><STRONG><a name="[38]"></a>vpostSyncLCMInit</STRONG> (ARM, 1052 bytes, Stack size 40 bytes, n9h26_vpost_sync_lcm.o(i.vpostSyncLCMInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 228 + Unknown Stack Size
<LI>Call Chain = vpostSyncLCMInit &rArr; vpostLcmConfigure &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostsetLCM_TimingType
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostVAStopTrigger
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostVAStartTrigger
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostSetYUVEndianSelect
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostSetSyncLCM_VTiming
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostSetSyncLCM_ImageWindow
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostSetSyncLCM_HTiming
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostSetSerialSyncLCM_Interface
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostSetParalelSyncLCM_Interface
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostSetLCM_TypeSelect
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostSetLCM_ImageSource
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostSetFrameBuffer_Size
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostSetFrameBuffer_DataType
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostLcmConfigure
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSyncLcmDataBus
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostLcmReset
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostLcmBacklight
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetPLLOutputHz
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetExternalClock
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[82]"></a>vpostVAStartTrigger</STRONG> (ARM, 24 bytes, Stack size 0 bytes, n9h26_vpost_driver.o(i.vpostVAStartTrigger))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostSyncLCMInit
</UL>

<P><STRONG><a name="[74]"></a>vpostVAStopTrigger</STRONG> (ARM, 24 bytes, Stack size 0 bytes, n9h26_vpost_driver.o(i.vpostVAStopTrigger))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostSyncLCMInit
</UL>

<P><STRONG><a name="[7b]"></a>vpostsetLCM_TimingType</STRONG> (ARM, 56 bytes, Stack size 0 bytes, n9h26_vpost_driver.o(i.vpostsetLCM_TimingType))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostSyncLCMInit
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[b]"></a>Undefined_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, wb_init.o(WB_INIT))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undefined_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undefined_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wb_init.o(WB_INIT)
</UL>
<P><STRONG><a name="[c]"></a>SWI_Handler1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, wb_init.o(WB_INIT))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_Handler1
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_Handler1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wb_init.o(WB_INIT)
</UL>
<P><STRONG><a name="[d]"></a>Prefetch_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, wb_init.o(WB_INIT))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prefetch_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prefetch_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wb_init.o(WB_INIT)
</UL>
<P><STRONG><a name="[e]"></a>Abort_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, wb_init.o(WB_INIT))
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abort_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abort_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wb_init.o(WB_INIT)
</UL>
<P><STRONG><a name="[f]"></a>IRQ_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, wb_init.o(WB_INIT))
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wb_init.o(WB_INIT)
</UL>
<P><STRONG><a name="[10]"></a>FIQ_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, wb_init.o(WB_INIT))
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wb_init.o(WB_INIT)
</UL>
<P><STRONG><a name="[5c]"></a>sysSetBaudRate</STRONG> (ARM, 56 bytes, Stack size 16 bytes, wb_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = sysSetBaudRate
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInitializeUART
</UL>

<P><STRONG><a name="[5f]"></a>sysPutRepChar</STRONG> (ARM, 40 bytes, Stack size 12 bytes, wb_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = sysPutRepChar
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PutChar_f
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatItem
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPutNumber
</UL>

<P><STRONG><a name="[60]"></a>sysPutStringReverse</STRONG> (ARM, 40 bytes, Stack size 12 bytes, wb_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PutChar_f
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPutNumber
</UL>

<P><STRONG><a name="[61]"></a>sysPutNumber</STRONG> (ARM, 444 bytes, Stack size 80 bytes, wb_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92 + Unknown Stack Size
<LI>Call Chain = sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPutStringReverse
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPutRepChar
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatItem
</UL>

<P><STRONG><a name="[62]"></a>FormatItem</STRONG> (ARM, 540 bytes, Stack size 40 bytes, wb_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132 + Unknown Stack Size
<LI>Call Chain = FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPutString
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PutChar_f
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPutNumber
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPutRepChar
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPrintf
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>

<P><STRONG><a name="[71]"></a>SpiDelay</STRONG> (ARM, 52 bytes, Stack size 0 bytes, n9h26_vpost_sync_lcm.o(i.SpiDelay))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostLcmConfigure
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiWrRegInit
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiWrReg
</UL>

<P><STRONG><a name="[70]"></a>SpiWrReg</STRONG> (ARM, 1032 bytes, Stack size 16 bytes, n9h26_vpost_sync_lcm.o(i.SpiWrReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SpiWrReg
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostLcmConfigure
</UL>

<P><STRONG><a name="[72]"></a>SpiWrRegInit</STRONG> (ARM, 880 bytes, Stack size 8 bytes, n9h26_vpost_sync_lcm.o(i.SpiWrRegInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SpiWrRegInit
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostLcmConfigure
</UL>

<P><STRONG><a name="[83]"></a>vpostLcmBacklight</STRONG> (ARM, 428 bytes, Stack size 8 bytes, n9h26_vpost_sync_lcm.o(i.vpostLcmBacklight))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vpostLcmBacklight
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostSyncLCMInit
</UL>

<P><STRONG><a name="[75]"></a>vpostLcmReset</STRONG> (ARM, 456 bytes, Stack size 12 bytes, n9h26_vpost_sync_lcm.o(i.vpostLcmReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = vpostLcmReset
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostSyncLCMInit
</UL>

<P><STRONG><a name="[6e]"></a>__arm_div8</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[6d]"></a>__arm_div5</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[6c]"></a>__arm_div2</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[6f]"></a>__arm_div_large</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[6a]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<HR></body></html>
